{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","idx","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAExBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OAEnCN,EAAc,MAMlB,SAII,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAnBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DAGZC,EAHY,iDAGmCC,UAAUH,GAH7C,+DAKCI,MAAMF,GALP,cAKZG,EALY,gBAOGA,EAAKC,OAPR,uBAOXC,EAPW,EAOXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbxB,kBAkBXM,GAlBW,4CAAF,sDCAPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OADAc,QAAQC,IAAIL,EAAMV,GAEd,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAIrB,ECNwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAU,WAEN1B,EAAQC,GACH0B,MAAK,SAAAC,GAEFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKvB,CAACtB,IAGIuB,EDhBwBK,CAAa5B,GAAhCa,EAAZ,EAAON,KAAYe,EAAnB,EAAmBA,QAMnB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAClDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEhBjCkB,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAKA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAACT,EAAS+B,GAAV,OAEZ,aADA,CACC,EAAD,CAAwB/B,SAAUA,GAApBA,Y,MCjBtCgC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6120516a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n\n    const [inputValue, setInputValue] = useState('')\n    const handleInputChange = (e)=>{\n        setInputValue(e.target.value) //cambia el valor del input con el evento onchange del textbox\n    }\n    const handleSubmit = (e)=>{\n        e.preventDefault(); //hace que el navegador no se refresque al hacer submit\n        if(inputValue.trim().length>2){\n            //inserta nuevas categorias\n            setCategories(cats=>[inputValue,...cats])\n            //setea en blanco el textbox luego de insertar una nueva categoria\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {/* muestra en el h1 el valor digitado en el input */}\n            {/* <h1>{inputValue}</h1> */}\n            {/* llama a los eventos onchange y refresca el value segun lo digitado */}\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n        </form>\n\n      \n    )\n}\n\n//Hace que la propiedad setCategories sea obligatorio de enviar cuando llamen a la funcion AddCategory\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGift= async(category)=>{\n\n    //obtiene url del endpoint api\n    const url=`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=1aify1yArUMCJI1ajVMT1vfX7Kc8arwd` //encodeURI quita espacios u otros caracteres en la url\n    //obtiene la respuesta api\n    const resp = await fetch(url);\n    //se obtiene el valor de la propiedad data de la respuesta en json del api mediante desestructuracion.\n    const {data} = await resp.json();\n    //se obtiene los id , title, url de cada gift traido mediante el api\n    const gifs = data.map(img =>{\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url //el signo \"?\" valida que si viene las imagenes lsa utiliza\n        }\n    })\n    \n    //retorna los gif\n    return gifs\n\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    console.log(title,url)\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { getGift } from '../helpers/getGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({category}) => {\n\n\n    //customhooks useFetchGifs\n    const {data:images,loading} =  useFetchGifs(category); //los \":\" son para renombrar la desestructuracion \n\n \n\n\n    //getGift();\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(img=>(\n                        <GifGridItem key={img.id} {...img} />\n                    ))\n                }\n            \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport {getGift} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category)=>{\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n\n        getGift(category)\n            .then(imgs=>{\n                \n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n\n            })\n\n    },[category])\n\n\n    return state; // {data:[], loading: true};\n}\n\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\n//Contenido de la aplicacion general\n\nexport const GifExpertApp = () => {\n    \n    const [categories, setCategories] = useState(['One Punch'])\n    // const handleAdd = ()=>{\n    //     setCategories(['Naruto',...categories]);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            {/* funcion que inserta nuevas categorias */}\n            <AddCategory setCategories={setCategories} />  \n            <hr/>\n           \n            <ol>\n                {\n                    categories.map( (category,idx) =>(\n                        // funcion que muestra el resultado de los gift x categoria\n                        <GifGrid key={category} category={category}/>\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}